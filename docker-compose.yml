version: '3.8'

services:

  nginx:
    image: nginx:${NGINX_VERSION}
    container_name: nginx
    networks: 
    - local
    ports:
    - "80:80"
    - "443:443"
    restart: always
    volumes:
      - ./nginx/reload.sh:/reload.sh
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/etc/letsencrypt/:/etc/letsencrypt/

  postgres-thingsboard:
    image: "postgres:${POSTGRES_VERSION}"
    container_name: "postgres_thingsboard"
    networks: 
    - local
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_SCHEMA}
    expose:
      - "5432"
    volumes:
      - pgdata_thingsboard:/var/lib/postgresql/data

  thingsboard:
    image: thingsboard/tb-postgres:${THINGSBOARD_VERSION}
    container_name: thingsboard
    networks: 
    - local
    expose:
    - "9090"
    - "1883"
    - "5683/udp"
    environment: 
      SPRING_DATASOURCE_URL: ${THINGSBOARD_DATABASE_URL}
      SPRING_DATASOURCE_USERNAME: ${DATABASE_USER}
      SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DRIVER_CLASS_NAME: org.postgresql.Driver      
      DATABASE_ENTITIES_TYPE: sql
      DATABASE_TS_TYPE: sql

  ucc-bot:
    build: ./bot
    container_name: bot
    networks: 
    - local
    environment:
      MicrosoftAppId: ${MICROSOFT_APP_ID}
      MicrosoftAppPassword: ${MICROSOFT_APP_PASSWORD}
    #command: /bin/sh -c "while sleep 1000; do :; done"
    volumes:
      - .:/workspace:cached
    expose:
    - "8080"

  application:
    build: ./services
    container_name: application
    networks: 
    - local
    # command: /bin/sh -c "while sleep 1000; do :; done"
    environment:
      DEBUG: "False"
    volumes:
      - .:/workspace:cached
    expose:
    - "8000"
    
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    networks: 
    - local
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    networks: 
    - local
    depends_on:
    - zookeeper
    expose:
    - "9092"
    - "9093"
    - "9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # PLAINTEXT = all from inside the docker network. Services inside the docker network have to connect to this port.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://kafka:9092,PLAINTEXT_LOCAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Create Kafka topics "NAME:PARTITION:REPLICAS,..."
      KAFKA_CREATE_TOPICS: "tickets:1:1,kassen_alert:1:1"

volumes:
    pgdata_thingsboard:
      driver: local     

networks:
    local:
      name: local
      driver: bridge